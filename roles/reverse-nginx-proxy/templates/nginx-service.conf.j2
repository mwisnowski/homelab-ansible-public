# {{ item.name | title }} Service Configuration
upstream {{ item.name }}_backend {
    server {{ item.upstream }};
    # Add DNS resolution for Docker networks
    resolver 127.0.0.11 valid=10s;
}

server {
    listen 80;
    server_name {{ item.subdomain }}.{{ reverse_proxy_domain }};

{% if web_containers_ssl_enabled | default(false) %}
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name {{ item.subdomain }}.{{ reverse_proxy_domain }};

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/{{ reverse_proxy_domain }}.crt;
    ssl_certificate_key /etc/nginx/ssl/{{ reverse_proxy_domain }}.key;
    
    # SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
{% endif %}

    # Proxy settings
    location / {
        proxy_pass http://{{ item.name }}_backend;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        {% if item.name == 'snipeit' %}
        # Snipe-IT specific headers (set only once, no $server_name/$host)
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Ssl on;
        proxy_set_header X-Forwarded-Host snipeit.example.com;
        proxy_set_header Host snipeit.example.com;
        proxy_set_header X-Forwarded-Port $server_port;
        {% else %}
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Port $server_port;
        {% endif %}
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 8 8k;
        # Error handling
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        # WebSocket support (if needed)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

{% if item.name == 'grocy' %}
    # Grocy specific settings
    client_max_body_size 100M;
    
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://{{ item.name }}_backend;
        proxy_set_header Host $host;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
{% endif %}

{% if item.name == 'snipeit' %}
    # Snipe-IT specific settings
    client_max_body_size 100M;
    
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://{{ item.name }}_backend;
        proxy_set_header Host $host;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Handle file uploads
    location ~ ^/uploads/ {
        proxy_pass http://{{ item.name }}_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        client_max_body_size 100M;
    }
{% endif %}

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Logging
    access_log /var/log/nginx/{{ item.subdomain }}.{{ reverse_proxy_domain }}.access.log;
    error_log /var/log/nginx/{{ item.subdomain }}.{{ reverse_proxy_domain }}.error.log debug;
}
