---
- name: Generate and Distribute SSH Keys for example
  hosts: linux_hosts
  become: true
  gather_facts: true
  vars:
    target_user: "example"
    key_type: "ed25519"

  tasks:
    # Phase 1: Generate SSH keys on each host
    - name: Ensure user exists
      ansible.builtin.user:
        name: "{{ target_user }}"
        state: present
        shell: /bin/bash
        create_home: true
      tags:
        - user-setup
        - ssh-setup
        - ssh-user

    - name: Ensure .ssh directory exists with correct permissions
      ansible.builtin.file:
        path: "/home/{{ target_user }}/.ssh"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0700'
      tags:
        - ssh-setup
        - directories
        - ssh-directories

    - name: Generate ED25519 SSH key pair
      ansible.builtin.openssh_keypair:
        path: "/home/{{ target_user }}/.ssh/id_{{ key_type }}"
        type: "{{ key_type }}"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0600'
        comment: "{{ target_user }}@{{ inventory_hostname }}"
        force: false  # Don't overwrite existing keys
      register: ssh_key_result
      tags:
        - generate-keys
        - ssh-keys
        - key-generation

    - name: Display key generation status
      ansible.builtin.debug:
        msg: |
          Host: {{ inventory_hostname }}
          Key Status: {{ 'Generated new key' if ssh_key_result.changed else 'Key already exists' }}
          Public Key Path: /home/{{ target_user }}/.ssh/id_{{ key_type }}.pub
      tags:
        - key-status
        - info
        - ssh-info

    # Phase 2: Collect all public keys
    - name: Read public key from each host
      ansible.builtin.slurp:
        src: "/home/{{ target_user }}/.ssh/id_{{ key_type }}.pub"
      register: public_key_data
      tags:
        - collect-keys
        - gather-keys
        - ssh-keys

    - name: Store public key content as fact
      ansible.builtin.set_fact:
        host_public_key: "{{ public_key_data.content | b64decode | trim }}"
      tags:
        - collect-keys
        - gather-keys
        - key-facts

    # Phase 3: Distribute keys to all hosts
    - name: Add all host public keys to authorized_keys
      ansible.posix.authorized_key:
        user: "{{ target_user }}"
        key: "{{ hostvars[item]['host_public_key'] }}"
        state: present
        comment: "homelab-{{ item }}"
      loop: "{{ groups['linux_hosts'] }}"
      when: hostvars[item]['host_public_key'] is defined
      tags:
        - distribute-keys
        - ssh-keys
        - authorized-keys

    - name: Create SSH config for easy host connections
      ansible.builtin.blockinfile:
        path: "/home/{{ target_user }}/.ssh/config"
        create: true
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0600'
        marker: "# {mark} ANSIBLE MANAGED HOMELAB HOSTS"
        block: |
          # Homelab SSH Configuration
          {% for host in groups['linux_hosts'] %}
          {% if host != inventory_hostname %}
          Host {{ host }}
              HostName {{ hostvars[host]['ansible_host'] }}
              User {{ target_user }}
              Port {{ hostvars[host]['ansible_port'] | default(22) }}
              IdentityFile ~/.ssh/id_{{ key_type }}
              StrictHostKeyChecking no
          
          {% endif %}
          {% endfor %}
      tags:
        - ssh-config
        - configuration
        - ssh-configuration

    # Phase 4: Populate known_hosts
    - name: Add hosts to known_hosts to avoid prompts
      ansible.builtin.known_hosts:
        name: "{{ hostvars[item]['ansible_host'] }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t ' + key_type + ' ' + hostvars[item]['ansible_host']) }}"
        path: "/home/{{ target_user }}/.ssh/known_hosts"
        state: present
      loop: "{{ groups['linux_hosts'] }}"
      when: hostvars[item]['ansible_host'] != ansible_host  # Don't add self
      ignore_errors: true  # Continue if host is unreachable
      become_user: "{{ target_user }}"
      tags:
        - known-hosts
        - ssh-known-hosts
        - host-keys

    - name: Set correct permissions on SSH files
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: "{{ item.mode }}"
      loop:
        - { path: "/home/{{ target_user }}/.ssh/id_{{ key_type }}", mode: "0600" }
        - { path: "/home/{{ target_user }}/.ssh/id_{{ key_type }}.pub", mode: "0644" }
        - { path: "/home/{{ target_user }}/.ssh/authorized_keys", mode: "0600" }
        - { path: "/home/{{ target_user }}/.ssh/config", mode: "0600" }
        - { path: "/home/{{ target_user }}/.ssh/known_hosts", mode: "0644" }
      ignore_errors: true  # Some files might not exist
      tags:
        - fix-permissions
        - permissions
        - ssh-permissions

    # Phase 5: Test connectivity (optional)
    - name: Test SSH connectivity to other hosts
      ansible.builtin.command:
        cmd: "ssh -o ConnectTimeout=5 -o BatchMode=yes {{ target_user }}@{{ hostvars[item]['ansible_host'] }} 'echo Connected to {{ item }}'"
      loop: "{{ groups['linux_hosts'] }}"
      when: 
        - item != inventory_hostname
        - test_connectivity | default(false)
      register: connectivity_test
      ignore_errors: true
      become_user: "{{ target_user }}"
      changed_when: false
      tags:
        - test-connectivity
        - ssh-test
        - connectivity-test
        - never  # Only run when explicitly requested

    - name: Display connectivity test results
      ansible.builtin.debug:
        msg: |
          SSH Test from {{ inventory_hostname }} to {{ item.item }}:
          Result: {{ 'SUCCESS' if item.rc == 0 else 'FAILED' }}
          Output: {{ item.stdout if item.rc == 0 else item.stderr }}
      loop: "{{ connectivity_test.results }}"
      when: 
        - test_connectivity | default(false)
        - connectivity_test is defined
        - item.item != inventory_hostname
      tags:
        - test-connectivity
        - ssh-test
        - info
        - never

    # Final summary
    - name: Display SSH key setup summary
      ansible.builtin.debug:
        msg: |
          ================================================================
          SSH Key Setup Complete for {{ inventory_hostname }}
          ================================================================
          User: {{ target_user }}
          Key Type: {{ key_type }}
          Private Key: /home/{{ target_user }}/.ssh/id_{{ key_type }}
          Public Key: /home/{{ target_user }}/.ssh/id_{{ key_type }}.pub
          
          Authorized Keys: {{ groups['linux_hosts'] | length }} hosts
          SSH Config: Created with {{ (groups['linux_hosts'] | length) - 1 }} host entries
          
          Test SSH access with:
          ssh {{ target_user }}@<hostname>
          
          Or use the configured host aliases:
          {% for host in groups['linux_hosts'] %}
          {% if host != inventory_hostname %}
          ssh {{ host }}
          {% endif %}
          {% endfor %}
          ================================================================
      run_once: true
      tags:
        - summary
        - info
        - ssh-summary
